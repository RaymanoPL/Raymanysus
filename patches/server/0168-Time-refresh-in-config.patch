From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: RaymanoPL <raymanowy@gmail.com>
Date: Mon, 17 Apr 2023 20:21:47 +0200
Subject: [PATCH] Time-refresh-in-config


diff --git a/src/main/java/dev/pomf/dionysus/DionysusConfig.java b/src/main/java/dev/pomf/dionysus/DionysusConfig.java
index 71e6826180a7566e16aaebbea2f79f3ec75cd659..1f986a7c0407fd78cece25e1388f1b8e6d4b8eef 100644
--- a/src/main/java/dev/pomf/dionysus/DionysusConfig.java
+++ b/src/main/java/dev/pomf/dionysus/DionysusConfig.java
@@ -409,4 +409,12 @@ public class DionysusConfig {
                         networks is predictable and intuitive rather than locational and chaotic."""
         );
     }
+
+    public static int timeRefresh = 20;
+
+    private static void timeRefresh() {
+        timeRefresh = getInt("time-refresh", timeRefresh, """
+                Allows you to set how many ticks information about the time change should be sent to players.
+                Value 0 disables sending information about time changes.""");
+    }
 }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 2b82bace2a06e2eb22bebe1de92732cfeea05118..5cb0333e1597ed122995da65f43e3167e091adc7 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -883,21 +883,24 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
         MinecraftTimings.chunkIOTickTimer.stopTiming(); // Spigot
 
         MinecraftTimings.timeUpdateTimer.startTiming(); // Spigot
-        // Paper start - optimize time updates
-        for (final WorldServer world : this.worlds) {
-            final boolean doDaylight = world.getGameRules().getBoolean("doDaylightCycle");
-            final long dayTime = world.getDayTime();
-            long worldTime = world.getTime();
-            final PacketPlayOutUpdateTime worldPacket = new PacketPlayOutUpdateTime(worldTime, dayTime, doDaylight);
-            for (EntityHuman entityhuman : world.players) {
-                if (!(entityhuman instanceof EntityPlayer) || (ticks + entityhuman.getId()) % 20 != 0) {
-                    continue;
+        int timeRefresh = DionysusConfig.timeRefresh;
+        if (timeRefresh != 0) {
+            // Paper start - optimize time updates
+            for (final WorldServer world : this.worlds) {
+                final boolean doDaylight = world.getGameRules().getBoolean("doDaylightCycle");
+                final long dayTime = world.getDayTime();
+                long worldTime = world.getTime();
+                final PacketPlayOutUpdateTime worldPacket = new PacketPlayOutUpdateTime(worldTime, dayTime, doDaylight);
+                for (EntityHuman entityhuman : world.players) {
+                    if (!(entityhuman instanceof EntityPlayer) || (ticks + entityhuman.getId()) % timeRefresh != 0) {
+                        continue;
+                    }
+                    EntityPlayer entityplayer = (EntityPlayer) entityhuman;
+                    long playerTime = entityplayer.getPlayerTime();
+                    PacketPlayOutUpdateTime packet = (playerTime == dayTime) ? worldPacket :
+                            new PacketPlayOutUpdateTime(worldTime, playerTime, doDaylight);
+                    entityplayer.playerConnection.sendPacket(packet); // Add support for per player time
                 }
-                EntityPlayer entityplayer = (EntityPlayer) entityhuman;
-                long playerTime = entityplayer.getPlayerTime();
-                PacketPlayOutUpdateTime packet = (playerTime == dayTime) ? worldPacket :
-                        new PacketPlayOutUpdateTime(worldTime, playerTime, doDaylight);
-                entityplayer.playerConnection.sendPacket(packet); // Add support for per player time
             }
         }
         // Paper end
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 897a49eda09df4654ea31808907cb60c8fa94f77..33f310f4faf69ecb46171e1c05e16dbe20221ad8 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -1,48 +1,34 @@
 package net.minecraft.server;
 
 import co.aikar.timings.MinecraftTimings;
+import com.google.common.base.Predicate;
+import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.mojang.authlib.GameProfile;
 import dev.pomf.dionysus.DionysusConfig;
 import io.netty.buffer.Unpooled;
-import java.io.File;
-import java.net.SocketAddress;
-import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.UUID;
-import javax.annotation.Nullable;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
-
-// CraftBukkit start
-import com.google.common.base.Predicate;
-import com.google.common.collect.Iterables;
-
-import org.bukkit.craftbukkit.CraftServer;
-import org.bukkit.craftbukkit.CraftWorld;
-import org.bukkit.craftbukkit.chunkio.ChunkIOExecutor;
-
 import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.TravelAgent;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.chunkio.ChunkIOExecutor;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.entity.Player;
-import org.bukkit.event.player.PlayerChangedWorldEvent;
-import org.bukkit.event.player.PlayerPortalEvent;
-import org.bukkit.event.player.PlayerJoinEvent;
-import org.bukkit.event.player.PlayerLoginEvent;
-import org.bukkit.event.player.PlayerQuitEvent;
-import org.bukkit.event.player.PlayerRespawnEvent;
+import org.bukkit.event.player.*;
 import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
 import org.bukkit.util.Vector;
 import org.spigotmc.event.player.PlayerSpawnLocationEvent;
+
+import javax.annotation.Nullable;
+import java.io.File;
+import java.net.SocketAddress;
+import java.text.SimpleDateFormat;
+import java.util.*;
 // CraftBukkit end
 
 public abstract class PlayerList {
@@ -55,7 +41,12 @@ public abstract class PlayerList {
     private static final SimpleDateFormat g = new SimpleDateFormat("yyyy-MM-dd \'at\' HH:mm:ss z");
     private final MinecraftServer server;
     public final List<EntityPlayer> players = new java.util.concurrent.CopyOnWriteArrayList(); // CraftBukkit - ArrayList -> CopyOnWriteArrayList: Iterator safety
-    private final Map<UUID, EntityPlayer> j = Maps.newHashMap(); Map<UUID, EntityPlayer> getUUIDMap() { return j; } // Dionysus - OBFHELPER
+    private final Map<UUID, EntityPlayer> j = Maps.newHashMap();
+
+    Map<UUID, EntityPlayer> getUUIDMap() {
+        return j;
+    } // Dionysus - OBFHELPER
+
     private final GameProfileBanList k;
     private final IpBanList l;
     private final OpList operators;
@@ -75,20 +66,21 @@ public abstract class PlayerList {
 
     // CraftBukkit start
     private final CraftServer cserver;
-    private final Map<String,EntityPlayer> playersByName = new it.unimi.dsi.fastutil.objects.Object2ObjectOpenCustomHashMap<String, EntityPlayer>(
-        new it.unimi.dsi.fastutil.Hash.Strategy<String>() {
-            @Override
-            public int hashCode(String o) {
-                return o.toLowerCase().hashCode();
-            }
+    private final Map<String, EntityPlayer> playersByName = new it.unimi.dsi.fastutil.objects.Object2ObjectOpenCustomHashMap<String, EntityPlayer>(
+            new it.unimi.dsi.fastutil.Hash.Strategy<String>() {
+                @Override
+                public int hashCode(String o) {
+                    return o.toLowerCase().hashCode();
+                }
 
-            @Override
-            public boolean equals(String a, String b) {
-                return a.equalsIgnoreCase(b);
+                @Override
+                public boolean equals(String a, String b) {
+                    return a.equalsIgnoreCase(b);
+                }
             }
-        }
     );
-    @Nullable String collideRuleTeamName; // Paper - Team name used for collideRule
+    @Nullable
+    String collideRuleTeamName; // Paper - Team name used for collideRule
 
     public PlayerList(MinecraftServer minecraftserver) {
         this.cserver = minecraftserver.server = new CraftServer(minecraftserver, this);
@@ -366,9 +358,11 @@ public abstract class PlayerList {
                 PlayerList.this.sendAll(new PacketPlayOutWorldBorder(worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction.SET_WARNING_BLOCKS), worldborder.world);
             }
 
-            public void b(WorldBorder worldborder, double d0) {}
+            public void b(WorldBorder worldborder, double d0) {
+            }
 
-            public void c(WorldBorder worldborder, double d0) {}
+            public void c(WorldBorder worldborder, double d0) {
+            }
         });
     }
 
@@ -468,7 +462,7 @@ public abstract class PlayerList {
                 continue;
             }
 
-            entityplayer.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, new EntityPlayer[] { entityplayer1}));
+            entityplayer.playerConnection.sendPacket(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.ADD_PLAYER, new EntityPlayer[]{entityplayer1}));
         }
         entityplayer.sentListPacket = true;
         // CraftBukkit end
@@ -497,7 +491,8 @@ public abstract class PlayerList {
 
         PlayerQuitEvent playerQuitEvent = new PlayerQuitEvent(cserver.getPlayer(entityplayer), "\u00A7e" + entityplayer.getName() + " left the game");
         cserver.getPluginManager().callEvent(playerQuitEvent);
-        if (entityplayer.didPlayerJoinEvent) entityplayer.getBukkitEntity().disconnect(playerQuitEvent.getQuitMessage());
+        if (entityplayer.didPlayerJoinEvent)
+            entityplayer.getBukkitEntity().disconnect(playerQuitEvent.getQuitMessage());
 
         entityplayer.playerTick();// SPIGOT-924
         // CraftBukkit end
@@ -621,7 +616,7 @@ public abstract class PlayerList {
         // NeonPaper start - Fix MC-158900
         GameProfileBanEntry gameprofilebanentry;
         if (getProfileBans().isBanned(gameprofile) && (gameprofilebanentry = getProfileBans().get(gameprofile)) != null) {
-        // NeonPaper end
+            // NeonPaper end
 
             s = "You are banned from this server!\nReason: " + gameprofilebanentry.getReason();
             if (gameprofilebanentry.getExpires() != null) {
@@ -810,6 +805,7 @@ public abstract class PlayerList {
         // entityplayer1.playerConnection.a(entityplayer1.locX, entityplayer1.locY, entityplayer1.locZ, entityplayer1.yaw, entityplayer1.pitch);
         entityplayer1.playerConnection.sendPacket(new PacketPlayOutSpawnPosition(blockposition1));
         entityplayer1.playerConnection.sendPacket(new PacketPlayOutExperience(entityplayer1.exp, entityplayer1.expTotal, entityplayer1.expLevel));
+        entityplayer1.playerConnection.sendPacket(new PacketPlayOutUpdateTime(worldserver.getTime(), entityplayer1.getPlayerTime(), false));
         this.b(entityplayer1, worldserver);
         this.f(entityplayer1);
         if (!entityplayer.playerConnection.isDisconnected()) {
@@ -967,7 +963,7 @@ public abstract class PlayerList {
         float pitch = enter.getPitch();
         double d0 = enter.getX();
         double d1 = enter.getZ();
-         double d2 = 8.0D;
+        double d2 = 8.0D;
         /*
         double d0 = entity.locX;
         double d1 = entity.locZ;
@@ -977,7 +973,7 @@ public abstract class PlayerList {
 
         worldserver.methodProfiler.a("moving");
         if (worldserver1.dimension == -1) {
-            d0 = MathHelper.a(d0 / d2, worldserver1.getWorldBorder().b()+ 16.0D, worldserver1.getWorldBorder().d() - 16.0D);
+            d0 = MathHelper.a(d0 / d2, worldserver1.getWorldBorder().b() + 16.0D, worldserver1.getWorldBorder().d() - 16.0D);
             d1 = MathHelper.a(d1 / d2, worldserver1.getWorldBorder().c() + 16.0D, worldserver1.getWorldBorder().e() - 16.0D);
             /*
             entity.setPositionRotation(d0, entity.locY, d1, entity.yaw, entity.pitch);
@@ -1149,7 +1145,7 @@ public abstract class PlayerList {
     // CraftBukkit start - add a world/entity limited version
     public void sendAll(Packet packet, EntityHuman entityhuman) {
         for (int i = 0; i < this.players.size(); ++i) {
-            EntityPlayer entityplayer =  this.players.get(i);
+            EntityPlayer entityplayer = this.players.get(i);
             if (entityhuman != null && entityhuman instanceof EntityPlayer && !entityplayer.getBukkitEntity().canSee(((EntityPlayer) entityhuman).getBukkitEntity())) {
                 continue;
             }
@@ -1266,7 +1262,7 @@ public abstract class PlayerList {
         // CraftBukkit start
         Player player = server.server.getPlayer(gameprofile.getId());
         if (player != null) {
-           player.recalculatePermissions();
+            player.recalculatePermissions();
         }
         // CraftBukkit end
     }
@@ -1303,6 +1299,7 @@ public abstract class PlayerList {
     public boolean isWhitelisted(GameProfile gameprofile) {
         return isWhitelisted(gameprofile, null);
     }
+
     public boolean isWhitelisted(GameProfile gameprofile, org.bukkit.event.player.PlayerLoginEvent loginEvent) {
         boolean isOp = this.operators.d(gameprofile);
         boolean isWhitelisted = !this.getHasWhitelist() || isOp || this.whitelist.d(gameprofile);
@@ -1351,7 +1348,7 @@ public abstract class PlayerList {
 
             // CraftBukkit start - Test if player receiving packet can see the source of the packet
             if (entityhuman != null && entityhuman instanceof EntityPlayer && !entityplayer.getBukkitEntity().canSee(((EntityPlayer) entityhuman).getBukkitEntity())) {
-               continue;
+                continue;
             }
             // CraftBukkit end
 
@@ -1375,18 +1372,21 @@ public abstract class PlayerList {
 
     public void savePlayers(Integer interval) {
         MCUtil.ensureMain("Save Players", () -> { // Paper - ensure main
-        long now = MinecraftServer.currentTick;
-        MinecraftTimings.savePlayers.startTiming(); // Paper
-        int numSaved = 0; // Paper
-        for (int i = 0; i < this.players.size(); ++i) {
-            EntityPlayer entityplayer = this.players.get(i);
-            if (interval == null || now - entityplayer.lastSave >= interval) {
-                this.savePlayerFile(entityplayer);
-                if (interval != null && ++numSaved <= com.destroystokyo.paper.PaperConfig.maxPlayerAutoSavePerTick) { break; } // Paper
+            long now = MinecraftServer.currentTick;
+            MinecraftTimings.savePlayers.startTiming(); // Paper
+            int numSaved = 0; // Paper
+            for (int i = 0; i < this.players.size(); ++i) {
+                EntityPlayer entityplayer = this.players.get(i);
+                if (interval == null || now - entityplayer.lastSave >= interval) {
+                    this.savePlayerFile(entityplayer);
+                    if (interval != null && ++numSaved <= com.destroystokyo.paper.PaperConfig.maxPlayerAutoSavePerTick) {
+                        break;
+                    } // Paper
+                }
             }
-        }
-        MinecraftTimings.savePlayers.stopTiming(); // Paper
-        return null; }); // Paper - ensure main
+            MinecraftTimings.savePlayers.stopTiming(); // Paper
+            return null;
+        }); // Paper - ensure main
     }
     // Paper end
 
@@ -1414,7 +1414,8 @@ public abstract class PlayerList {
         return this.operators.getEntries();
     }
 
-    public void reloadWhitelist() {}
+    public void reloadWhitelist() {
+    }
 
     public void b(EntityPlayer entityplayer, WorldServer worldserver) {
         WorldBorder worldborder = entityplayer.world.getWorldBorder(); // CraftBukkit
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index cc9f467cc85704d536545aa63985340013e63703..c04cf4cb9b83ca4ea9f8e4561d2dc3150f4df5ab 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -3077,6 +3077,17 @@ public abstract class World implements IBlockAccess {
 
     public void setDayTime(long i) {
         this.worldData.setDayTime(i);
+        final boolean doDaylight = getGameRules().getBoolean("doDaylightCycle");
+        final long dayTime = getDayTime();
+        long worldTime = world.getTime();
+        final PacketPlayOutUpdateTime worldPacket = new PacketPlayOutUpdateTime(worldTime, dayTime, doDaylight);
+        for (EntityHuman entityhuman : players) {
+            EntityPlayer entityplayer = (EntityPlayer) entityhuman;
+            long playerTime = entityplayer.getPlayerTime();
+            PacketPlayOutUpdateTime packet = (playerTime == dayTime) ? worldPacket :
+                    new PacketPlayOutUpdateTime(worldTime, playerTime, doDaylight);
+            entityplayer.playerConnection.sendPacket(packet); // Add support for per player time
+        }
     }
 
     public BlockPosition getSpawn() {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index fa104ba4ded09339a3b895969a1f40d3c6923f08..7bd0f694bf6625cb5790729a55e1b0e4ab679296 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -865,6 +865,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public void setPlayerTime(long time, boolean relative) {
         getHandle().timeOffset = time;
         getHandle().relativeTime = relative;
+        if (getHandle() != null)
+            getHandle().playerConnection.sendPacket(new PacketPlayOutUpdateTime(getHandle().world.getTime(), getHandle().getPlayerTime(), getHandle().world.getGameRules().getBoolean("doDaylightCycle")));
     }
 
     @Override
@@ -1873,12 +1875,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
                     if ( effect.getName().startsWith( p.b().replace("_", "") ) )
                     {
                         particle = p;
-                        if ( effect.getData() != null ) 
+                        if ( effect.getData() != null )
                         {
                             if ( effect.getData().equals( org.bukkit.Material.class ) )
                             {
                                 extra = new int[]{ id };
-                            } else 
+                            } else
                             {
                                 extra = new int[]{ (data << 12) | (id & 0xFFF) };
                             }
